diff --git a/aten/src/THCUNN/FeatureLPPooling.cu b/aten/src/THCUNN/FeatureLPPooling.cu
<<<<<<< HEAD
index 4ad190fbe..615ab4ec6 100644
--- a/aten/src/THCUNN/FeatureLPPooling.cu
+++ b/aten/src/THCUNN/FeatureLPPooling.cu
@@ -193,7 +193,7 @@ featureLPPoolingUpdateOutput(const THCDeviceTensor<T, 4> input,
 
     if (Stride < Width) {
       // Shift registers for calculating the next point
-      RegisterUtils<T, Width>::shiftLeft<Stride>(in);
+      RegisterUtils<T, Width>::template shiftLeft<Stride>(in);
     }
   }
 }
@@ -377,7 +377,7 @@ featureLPPoolingUpdateGradInput(const THCDeviceTensor<T, 4> gradOutput,
 
     if (Stride < Width) {
       // Shift registers for calculating the next point
-      RegisterUtils<T, Width>::shiftLeft<Stride>(in);
+      RegisterUtils<T, Width>::template shiftLeft<Stride>(in);
     }
   }
 }
=======
index 4ad190fbe..08c277064 100644
--- a/aten/src/THCUNN/FeatureLPPooling.cu
+++ b/aten/src/THCUNN/FeatureLPPooling.cu
@@ -468,6 +468,7 @@ runFeatureLPPoolingUpdateOutput(THCState* state,
       LP_STRIDE_CASE(4, WIDTH);                 \
     }
 
+#if !defined(__HIP_PLATFORM_HCC__)
   if (power == 2.0f) {
     switch (width) {
       L2_WIDTH_CASE(2);
@@ -505,6 +506,7 @@ runFeatureLPPoolingUpdateOutput(THCState* state,
       LP_WIDTH_CASE(16);
     }
   }
+#endif
 
   // Otherwise, we have an unhandled width and/or stride.
   return false;
@@ -602,6 +604,7 @@ runFeatureLPPoolingUpdateGradInput(THCState* state,
       LP_STRIDE_CASE(4, WIDTH);                 \
     }
 
+#if !defined(__HIP_PLATFORM_HCC__)
   if (power == 2.0f) {
     switch (width) {
       L2_WIDTH_CASE(2);
@@ -639,6 +642,7 @@ runFeatureLPPoolingUpdateGradInput(THCState* state,
       LP_WIDTH_CASE(16);
     }
   }
+#endif
 
   // Otherwise, we have an unhandled width and/or stride.
   return false;
>>>>>>> Seperated the individual patch files to make it easier to detect issues while building.
