diff --git a/aten/src/THC/THCTensorMathReduce.cuh b/aten/src/THC/THCTensorMathReduce.cuh
index d118f5dd3..8101bdce8 100644
--- a/aten/src/THC/THCTensorMathReduce.cuh
+++ b/aten/src/THC/THCTensorMathReduce.cuh
@@ -17,7 +17,7 @@
 #endif
 
 /*
-Reductions that (only) operate on accumulate types. 
+Reductions that (only) operate on accumulate types.
 */
 
 template <typename T>
@@ -73,14 +73,14 @@ struct SquareFunctor {
 template <typename T>
 struct ReduceMin {
   inline __device__ T operator()(T a, T b) const {
-    return (THCNumerics<T>::lt(a, b) || THCNumerics<T>::isnan(a)) ? a : b;
+    return ((int)THCNumerics<T>::sub(a, b) < 0 || THCNumerics<T>::isnan(a)) ? a : b;
   }
 };
 
 template <typename T>
 struct ReduceMax {
   inline __device__ T operator()(T a, T b) const {
-    return (THCNumerics<T>::gt(a, b) || THCNumerics<T>::isnan(a)) ? a : b;
+    return ((int)THCNumerics<T>::sub(a, b) > 0 || THCNumerics<T>::isnan(a)) ? a : b;
   }
 };
 
@@ -104,10 +104,11 @@ inline __device__ T THCMax(const T a, const T b) {
 }
 
 template<typename T, typename AccT>
-__global__ void THCTensor_kernel_renorm(T *data, 
-                                        const AccT value, 
-                                        const ptrdiff_t size, 
+__global__ void THCTensor_kernel_renorm(T *data,
+                                        const AccT value,
+                                        const ptrdiff_t size,
                                         const AccT maxnorm) {
+  #if !defined(__HIP_DEVICE_COMPILE__)
   __shared__ AccT buffer[32];
   int64_t tx = threadIdx.x;
   int64_t bx = blockIdx.x;
@@ -136,7 +137,7 @@ __global__ void THCTensor_kernel_renorm(T *data,
     // get norm of axis
     for (ptrdiff_t i = tx; i < size; i += step) {
       const AccT val = scalar_cast<AccT>(row[i]);
-      buffer[tx] = THCNumerics<AccT>::add( 
+      buffer[tx] = THCNumerics<AccT>::add(
         buffer[tx],
         THCNumerics<AccT>::pow(THCNumerics<AccT>::abs(val), value)
       );
@@ -163,6 +164,7 @@ __global__ void THCTensor_kernel_renorm(T *data,
       row[i] = scalar_cast<T>(THCNumerics<AccT>::mul(val, norm));
     }
   }
+  #endif
 }
 
 template <typename T>
